{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"TechXchange Lab 1447","text":""},{"location":"#beyond-modeling-ibm-devops-model-architect-soup-to-nuts","title":"Beyond modeling! - IBM DevOps Model Architect Soup-to-Nuts","text":""},{"location":"#lab-workbook","title":"Lab Workbook","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Lab 00: Cloning the GitHub Repository</p> <p>Lab 01: Introduction to basic UML</p> <p>Lab 02: Introduction to basic BPMN</p> <p>Lab 03: Modeling for OpenAPI</p> <p>Lab 04: Modeling for Java Developers</p>"},{"location":"00_Cloning_Repository/","title":"Lab 0","text":""},{"location":"00_Cloning_Repository/#cloning-the-github-repository","title":"Cloning the GitHub Repository","text":""},{"location":"00_Cloning_Repository/#logging-into-lab-environment","title":"Logging into Lab environment","text":"<ol> <li>Click on the empty screen to get the login dialog</li> <li></li> <li></li> <li>Enter the password \"IBMDem0s\" in the password field and press enter</li> <li></li> <li>You are now logged in into your lab environment</li> </ol>"},{"location":"00_Cloning_Repository/#prepare-to-clone-the-repository","title":"Prepare to clone the repository","text":"<ol> <li>Doubleclick on the browser icon/url \"LAB 1447 repository\" to open a browser and view the repository</li> <li></li> <li></li> <li>If you have an GitHub account you can login and fork this repository if you plan to add your changes</li> <li>In this lab we will just clone the original repository without pushing changes.</li> <li>Click on \"Code\" Button to get the clone dialog</li> <li></li> <li>You can now either copy the URL to be used with GitHub Desktop or click on \"Open with Github Desktop\" when you have used it before.</li> <li></li> </ol>"},{"location":"00_Cloning_Repository/#using-github-desktop","title":"Using Github Desktop","text":"<ol> <li>Doubleclick on the \"GitHub Desktop\" icon on the desktop and the startup screen appears</li> <li></li> <li></li> <li>On this screen click on \"skip this step\" if you do not have a Github account, else login using the link \"Sign in to GitHub.com\"</li> <li>If you used \"skip ..\" a dialog asks you for a name and email adress</li> <li>You can either provide yours or use a dummy one like in the screenshot</li> <li></li> <li>Press Finish</li> <li>In the next dialog step you will be asked if you want to clone an existing repository, create on or use a local one</li> <li></li> <li>Click on \"Clone a repository from internet\" and in the next dialog step select the tab \"URL\"</li> <li>here paset the URL you have copied before and either select the default local folder or provide your own</li> <li></li> <li>Click on \"Clone\" to proceed</li> <li>The repository will be copied to your local drive in a few seconds and information will be provided when it is finished if you want it to be opened in Visual Studio Code or show it with the File Explorer</li> <li></li> <li>We will use the Explorer to open the new folder and have a look at its files.<ol> <li></li> </ol> </li> </ol>"},{"location":"00_Cloning_Repository/#conclusion-of-lab-0","title":"Conclusion of Lab 0","text":"<p>You have now successfully cloned our Lab repository which contains the working files and the documentation.</p>"},{"location":"01_Introduction_to_basic_UML/","title":"Lab 1","text":""},{"location":"01_Introduction_to_basic_UML/#basic-usage-and-introduction-to-uml-models-and-diagrams","title":"Basic usage and introduction to UML Models and Diagrams","text":"<p>What we want to achieve in this lab a short introduction how to use DevOps Model Architect. You will get an overview how to use the Modeling Perspective and a simple intro into UML Models and Diagrams.</p>"},{"location":"01_Introduction_to_basic_UML/#start-devops-model-architect-and-switch-to-modeling-perspective","title":"Start DevOps Model Architect and Switch to Modeling Perspective","text":"<ol> <li>Doubleclick on the icon for \"IBM DevOps Model Architect\" on the Desktop</li> </ol> <ol> <li>Select a workspace folder for Eclipse. You can for example call it <code>dma_workspace_YOURNAME</code>.</li> </ol> <ol> <li>The first time you open a new workspace you will get the Welcome Page. Close it by pressing the Workbench button in the upper right corner.</li> </ol> <ol> <li>Next switch to the Modeling Perspective</li> <li> <p>Click on the Menu \"Window\" on top of Eclipse</p> <p></p> </li> <li> <p>Click on Open Perspective then on Other</p> <p></p> </li> <li> <p>Dialog opens with list of perspectives</p> <p></p> </li> <li> <p>Scroll down and Select \"Modeling\" from the list</p> <p></p> </li> <li> <p>The Modeling Perspetive opens. You can also switch Perspectives using the icon on the top right corner</p> <p></p> </li> </ol>"},{"location":"01_Introduction_to_basic_UML/#create-a-project","title":"Create a project","text":"<ol> <li>Click on Create a new Model Project or Create Project</li> </ol> <ol> <li>In the case you selected \"Create a Project\" a wizard will be shown.</li> <li>Search and select the modeling project type</li> </ol> <ol> <li>Provide a name for your new project.</li> </ol> <ol> <li>Select \"General\" from Categegories and \"Blank Package\" from Templates</li> </ol> <ol> <li>Have a look at your freshly created new Project</li> </ol>"},{"location":"01_Introduction_to_basic_UML/#basic-uml-models-and-basic-uml-diagrams","title":"Basic UML Models and Basic UML Diagrams","text":"<ol> <li>If Project is collapsed, click on the &gt; symbols to expand Project and Elements</li> </ol> <ol> <li>Add new Class to Model by right clicking the Package and select the class entry in the UML menu</li> </ol> <ol> <li>This creates a fresh new class. Name this new class \"Customer\"</li> </ol> <ol> <li>Next add a new attribute to this class using the context menu of the element and name it \"custID\"</li> </ol> <ol> <li>Now create an additional attribute and name it \"custName\"</li> </ol> <ol> <li>Create a new Diagram to manage all customer related model artifacts and name it \"CustomerStore_Class\"</li> </ol> <ol> <li>Add our \"Customer\" class to this diagram by using the context menu of the item</li> </ol> <ol> <li>Don't forget to save all your changes!</li> </ol>"},{"location":"01_Introduction_to_basic_UML/#how-to-import-existing-artifacts","title":"How to import existing artifacts","text":"<ol> <li>Right click Project to open context menu and select Import</li> </ol> <ol> <li>In this lab we want to import from the filesystem, please select \"file system\" in the wizard dialog</li> </ol> <p>click on Next 3. In the file system dialog browse for the \"Simple-Model\" folder from your repository</p> <p></p> <p>click on Browse and select \"Simple-Model\"</p> <p></p> <p>click on Open 4. The Import dialog opens</p> <p></p> <ol> <li>Select the folder on the left (checkbox) and the model file will be automatically selected.</li> </ol> <p></p> <ol> <li>Click on Finish to start the import</li> <li>The modeling artifact is imported and \"SimpleUMLModel\" is shown.</li> </ol> <p></p> <ol> <li>Double-click on the newly created Model and a migration dialog will open as the artifacts were created with older version.</li> </ol> <p></p> <p>Just accept the default settings and the diagram will be opened</p> <p></p> <ol> <li>To have a better view, right click on the canvas to open context menu and select \"Arrange All\"</li> </ol> <p></p> <p></p>"},{"location":"01_Introduction_to_basic_UML/#how-to-add-a-new-uml-artifact-to-existing-diagram","title":"How to add a new UML artifact to existing diagram","text":"<ol> <li>Adding new UML artifacts to a diagram can be done by using the \"Palette\" or the context menue of the diagram.</li> <li>First we will use the \"Palette\"</li> <li>On the right side of DevOps Model Architect you will find the \"Palette\" menue.</li> <li> <p>Click on \"Class\" entry to get all UML class types available</p> <p></p> </li> <li> <p>Drag and drop the \"Class\" element from the Palette to the open diagram.</p> </li> <li> <p>A fresh new class is added and the name is selected for change. Change the name to \"APPF2\"</p> <p></p> </li> <li> <p>Now we want to create a relationship from \"APPF2\" to \"AppFunction1\"</p> <ol> <li>click and drag the \"incoming\" icon to \"AppFunction1\"</li> </ol> <p></p> <p></p> </li> <li> <p>A new dialog opens and use \"Create Instance\" type</p> <p></p> </li> <li> <p>The relation \"create instance\" is established between these two elements</p> <p></p> </li> <li> <p>Do not forget to save your changes!</p> </li> </ol>"},{"location":"01_Introduction_to_basic_UML/#conclusion-of-lab-1","title":"Conclusion of Lab 1","text":"<p>In this Lab we have been introduced how to use DevOps Model Architect to create a project, work on simple diagrams and import existing artifacts.</p>"},{"location":"02_Introduction_to_basic_BPMN/","title":"Lab 2","text":""},{"location":"02_Introduction_to_basic_BPMN/#bpmn-introduction","title":"BPMN Introduction","text":"<p>BPMN (Business Process Model and Notation) is a standard for describing business processes. In this lab you will use DMA to create a BPMN model and diagram by importing a textual description of a business process. For this lab the required environment has been setup. If you want to try it in your own environment, please follow this setup documentation.</p>"},{"location":"02_Introduction_to_basic_BPMN/#create-a-bpmn-project","title":"Create a BPMN Project","text":"<ol> <li>Create a new model project</li> </ol> <ol> <li> <p>Give the new project the name BPMN and click Next</p> </li> <li> <p>Select the Blank Process Model template and click Finish</p> </li> </ol> <p></p>"},{"location":"02_Introduction_to_basic_BPMN/#import-a-business-process-from-a-text-file","title":"Import a Business Process from a Text File","text":"<ol> <li>In the File menu perform the command Import.... Select the Text to BPMN import wizard.</li> </ol> <ol> <li>On the next wizard page fill out the fields as shown in the picture below. The source document to be imported can be found in the cloned Git repository at <code>DevOps-Model-Architect/TechXchange2024_LAB-1447/Text-to-BPMN/insurance_claim.txt</code>. Set the destination to the BPMN project that you created above.</li> </ol> <ol> <li> <p>Click Finish and wait for DMA to analyze the text file and translate it to a BPMN model and a diagram. It can take a while so be patient.</p> </li> <li> <p>Click Yes to open the generated BPMN diagram.</p> </li> </ol> <p></p> <ol> <li>Write your own business process in a text file and import it by following the steps above. You can use the same BPMN project as the destination.</li> </ol>"},{"location":"02_Introduction_to_basic_BPMN/#conclusion-of-lab-2","title":"Conclusion of Lab 2","text":"<p>This lab has introduced you to BPMN and how DevOps Model Architect can create a BPMN model and diagram from a textually described business process. You can of course also create business processes in DMA by manual creation of the BPMN diagrams, or you can start by importing a text file and then continue to refine it manually.</p>"},{"location":"03_Modeling_for_OpenAPI/","title":"Lab 3","text":""},{"location":"03_Modeling_for_OpenAPI/#modeling-for-openapi","title":"Modeling for OpenAPI","text":"<p>OpenAPI is a standard, programming language-agnostic interface description for HTTP APIs. In this lab you will use DMA to create a model representation of an OpenAPI YAML file, and visualize it in a class diagram.</p>"},{"location":"03_Modeling_for_OpenAPI/#create-a-model-project-for-openapi","title":"Create a Model Project for OpenAPI","text":"<ol> <li>Create a new model project</li> </ol> <ol> <li> <p>Give the new project the name OpenAPI and click Next</p> </li> <li> <p>Select the REST Service Model (OpenAPI3) template and click Finish</p> </li> </ol> <p></p>"},{"location":"03_Modeling_for_OpenAPI/#import-an-openapi-yaml-file-and-create-a-model-representation-for-it","title":"Import an OpenAPI YAML file and create a model representation for it","text":"<ol> <li>The OpenAPI specification provides several sample APIs. We will import an API that describes a pet store. Download the YAML file for this API from a web browser. Save it in a folder on the lab computer.</li> </ol> <ol> <li>Import the YAML file into the OpenAPI project by dragging it from the folder where you saved it and dropping it onto the OpenAPI project. Select to copy the file into the project.</li> </ol> <ol> <li>Select the OpenAPI model project and perform the command File - New - Transformation Configuration</li> </ol> <ol> <li>Give the transformation configuration a name (\"PetStore) and select OpenAPI 3.0 to REST Service Model in the list. Then click Finish.  </li> </ol> <ol> <li>The transformation configuration editor opens and shows there are errors. This is because we haven't yet specified the source and target for this transformation. Let's do it now. Click the Source and Target tab in the transformation configuration editor and set the YAML file as the source, and the OpenAPI3 Model as the target.</li> </ol> <ol> <li>To make the errors go away click the button to Validate the transformation configuration in the transformation configuration editor toolbar.</li> </ol> <ol> <li>Finally, to run the transformation click the button Run OpenAPI 3.0 to REST Service Model.</li> </ol> <ol> <li> <p>DMA will now transform the YAML file into a model and insert it into the target model. A Merge dialog will appear to inform about the model elements that will be merged into the model. Click OK to proceed.</p> </li> <li> <p>The model representation of the Pet Store API is now available in the OpenAPI model.</p> </li> </ol> <p></p>"},{"location":"03_Modeling_for_OpenAPI/#visualize-the-api-model-graphically","title":"Visualize the API model graphically","text":"<ol> <li>Create a class diagram from the context menu of the \"Diagrams\" virtual folder. In the dialog give it a name (\"PetStoreAPI\") and press OK.</li> </ol> <ol> <li>Select some of the model elements in the Project Explorer.</li> </ol> <ol> <li>Drag them from the Project Explorer and drop them onto the class diagram.</li> </ol>"},{"location":"03_Modeling_for_OpenAPI/#conclusion-of-lab-3","title":"Conclusion of Lab 3","text":"<p>This lab has introduced you to how OpenAPI models can be created in DMA. Here we started by importing an existing YAML file, but you can of course also start by creating the model from scratch. DMA also supports generating the OpenAPI YAML file from the model. The steps are very similar to those mentioned above. Feel free to try it! (Hint: The transformation configuration to use for this is called REST Service Model to OpenAPI 3.0).</p>"},{"location":"04_Modeling_for_Java/","title":"Lab 4","text":""},{"location":"04_Modeling_for_Java/#modeling-for-java-developers","title":"Modeling for Java Developers","text":"<p>In this lab we will look at some scenarios where DMA can help you when developing Java applications.</p>"},{"location":"04_Modeling_for_Java/#import-java-code-from-github","title":"Import Java Code from GitHub","text":"<ol> <li>Switch to the Git perspective and click the hyperlink in the Git Repositories view for cloning a Git repository. Select GitHub in the dialog.</li> </ol> <ol> <li>Search for a Java Git repository with the name geojson-model-java. Pick the found repository with that name.</li> </ol> <ol> <li>Click the Next button twice and then enter a local directory where to store the Git repository locally. Then click Finish.</li> </ol> <ol> <li> <p>Right-click on the Git repository in the Git Repositories view and perform the command Import projects. Click Finish in the dialog that appears.</p> </li> <li> <p>Now switch to the Modeling perspective. You should see the imported Java project in the Project Explorer:</p> </li> </ol> <p></p> <p>The purpose of this lab is not to build the Java code so don't worry about the Java build problems that are reported on the project.</p>"},{"location":"04_Modeling_for_Java/#visualize-java-code-in-diagrams","title":"Visualize Java Code in Diagrams","text":"<ol> <li>Expand in the Project Explorer so you can select the Java files of the \"geojson\" package:</li> </ol> <ol> <li>Right-click and perform the context menu command Visualize - Add to New Diagram File - Class Diagram. In the dialog choose to place the new class diagram at the root of the Java project. Click Finish.</li> </ol> <ol> <li>A class diagram appears where the contents of all selected Java files are shown.</li> </ol> <p>Note that DMA has created this class diagram as a visualization of the Java code, without first creating a model for it. You can use the diagram as a means to navigate around in the Java code and even to edit it.</p> <ol> <li> <p>Double-click on symbols in the class diagram to navigate to the corresponding Java types. You can also double-click on attributes and methods to navigate to them.</p> </li> <li> <p>Select the \"getType()\" method of the \"FeatureCollection\" class. Note how a popup appears showing the implementation of this method. Press F2 to bring focus to the popup and then type a comment in the method. Then click the Save button to save the changes.</p> </li> </ol> <p></p> <ol> <li>Double-click on the \"getType()\" method to confirm that your comment was added in the Java method:</li> </ol> <p></p>"},{"location":"04_Modeling_for_Java/#create-a-uml-model-from-the-java-code","title":"Create a UML Model from the Java Code","text":"<ol> <li>Create a new model project (File - New - Model Project). In the dialog give it a name (\"GeoJsonModel\") and press Next. Select the Java Development category and the Blank Model template. Click Finish.</li> </ol> <ol> <li>Right-click the created project and perform the context menu command Transform - New Configuration. Give the transformation configuration a name (\"JavaToUML\") and set the transformation kind to \"Java to UML\". Click Finish.</li> </ol> <ol> <li>The transformation configuration editor opens. In the Source and Target tab set the source to be the \"geojson\" Java package and the target to be the package of the \"GeoJsonModel\" project.</li> </ol> <ol> <li>Save the transformation configuration and then run the transformation by clicking the button Run Java to UML in the transformation configuration editor toolbar:</li> </ol> <ol> <li>The Java code is transformed to a UML model. A dialog appears where you can preview what model elements that will be created. Click OK and then expand the \"GeoJsonModel\" project to see the model elements.</li> </ol>"},{"location":"04_Modeling_for_Java/#visualize-and-edit-the-uml-model","title":"Visualize and Edit the UML Model","text":"<ol> <li> <p>Right-click on the \"geojson\" package and create a new class diagram (Add Diagram - Class Diagram).</p> </li> <li> <p>Select some or all of the classes in the \"geojson\" package and drag-drop them onto the class diagram, in order to visualize them.</p> </li> </ol> <p></p> <p>Note the difference between this visualization and the one you created from the Java code previously. While the former was a visualization of the Java code, this one shows model elements that you can work with just like any other model.</p> <ol> <li>Select the \"Point\" class and click the Documentation tab in the Properties view. Edit the documentation for the class:</li> </ol> <p></p> <ol> <li>Also add an operation \"getAltitude()\" to the \"Point\" class. You can for example do it from the tooltip in the class diagram:</li> </ol> <p></p> <ol> <li>On the General tab in the Properties of the new operation set the return type to \"Double\" by clicking the Set return type button. Note that there are several types with the name \"Double\" so make sure to select the one in \"java.lang\". For it to appear you need to mark both checkboxes Entire workspace and Referenced libraries.</li> </ol> <p></p> <p>Note that you don't provide the Java code that implements the \"getAltitude()\" operation in the model. Instead you will do it in the next step where we will generate new Java code from the model.</p>"},{"location":"04_Modeling_for_Java/#generate-java-code-from-the-model","title":"Generate Java Code from the Model","text":"<ol> <li> <p>Create a new Java project (File - Project and select Java Project). Give it the name \"RefactoredJava\" and click Finish. Answer No when you are asked if you want to switch to the Java perspective.</p> </li> <li> <p>Right-click on the \"GeoJsonModel\" project and perform the context menu command Transform - New Configuration. Give the transformation configuration a name (\"UMLToJava\") and set the transformation kind to \"UML to Java\". Click Finish.</p> </li> </ol> <p></p> <ol> <li>The transformation configuration editor opens. In the Source and Target tab set the source to be the \"geojson\" Java package and the target to be the newly created \"RefactoredJava\" project.</li> </ol> <p></p> <ol> <li>Save the transformation configuration and then run the transformation by clicking the button Run UML to Java in the transformation configuration editor toolbar:</li> </ol> <p></p> <ol> <li>Expand the \"RefactoredJava\" project in the Project Explorer to see the generated Java code. Once again, don't worry about the build errors since we will not build the Java code in this lab.</li> </ol> <p></p> <ol> <li>Double-click \"Point.java\" and confirm that it has the updated documentation comment in the beginning of the file. Then scroll down to the end of the file to find the \"getAltitude()\" method that you created. Replace the default implementation with a proper implementation for this method:</li> </ol> <p></p> <ol> <li>Re-run the \"JavaToUML\" transformation again and confirm that your edits remain in the file.</li> </ol>"},{"location":"04_Modeling_for_Java/#conclusion-of-lab-4","title":"Conclusion of Lab 4","text":"<p>This lab has introduced you to the Java support in DMA. You can directly visualize Java code in diagrams without having to first create a model. This can be useful as a way to understand and navigate around in a big code base. However, you can also choose to transform the Java code to a UML model. This can for example be useful if you want to refactor the Java code and prefer to do this using a UML model. You can then generate new Java code from that UML model. Implementations of Java methods can be written in the generated Java files, as long as you place your code within the \"begin-user-code\" and \"end-user-code\" comments.</p>"}]}